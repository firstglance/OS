课程介绍：
基本概念及原理
操作系统介绍
中断及系统调用
内存管理
进程及线程
调度
同步
文件系统
I/O子系统

练习：
在uCore操作系统上做实验
http://github.com/chyyuu/mooc_os_lab
延伸
概念及故事

操作系统实验：
实验0：准备
实验1：系统启动及中断
实验2：物理内存管理
实验3：虚拟内存管理
实验4：内核线程管理
实验5：用户进程管理
实验6: CPU调度
实验7：同步及互斥
实验8：文件系统

预备知识：
计算机结构原理（Intel 80386）
数据结构
C和汇编语言

1.2
什么是操作系统？
功能区分
对上和对下
功能和服务
用户、应用程序角度提供服务，操作系统是一个控制软件，控制软件、应用程序怎么运行
同时限制不同的应用程序，占用不同的资源
为应用程序提供不同的服务，I/O、网卡服务等
杀死应用程序

对下：
资源管理
管理外设、分配资源
把CPU抽象成进程，磁盘抽象成文件，内存抽象成地址空间

操作系统架构层次结构
硬件之上
应用程序之下

应用软件
操作系统位于应用软件之下，为应用软件提供软件支撑
面向应用程序--shell
面向内部--kernel---我们研究的重点，在shell之下
shell--GUI和命令行shell

CPU--涉及到CPU调度、进程、线程管理
内存--物理内存和虚拟内存(要给上层应用提供相对独立尽可能大的空间使用)
Disk-抽象成文件系统，以文件的方式给我们应用程序提供存储、访问永久保存的数据的环境
还有和底层相关：终端处理和I/O、设备驱动，和我们底层硬件打交道

操作系统特征：
并发
计算机系统中同时存在多个运行的程序，需要OS管理和调度
并发：在一段时间内，有多个程序可以运行
并行：在一个时间点上，有多个程序可以同时执行
共享
把有效的资源共享给应用程序，同时变成互斥和分时访问，在一个时间点上，只有一个程序可以访问一个资源
虚拟
把硬件虚拟化，CPU、内存、硬盘，虚拟化成进程、文件系统、内存空间，带来的好处是使得我们每个用户和程序感觉到独占一台计算机
异步
程序的执行不是一贯到底，而是走走停停，向前推进的速度不可预知
但只要运行环境相同，OS需要保证程序运行的结果也要相同
即使异步，也要保证结果正确。

前面介绍了操作系统
我们为什么学习操作系统？

综合课程-结合许多不同的课程
程序设计语言
数据结构
算法
计算机体系结构
材料
操作系统概念和原理、源代码
技能
操作系统的设计和实现


学习操作系统很酷、学习和掌握知识的过程、设计很底层很有用、掌握好OS知识、对OS进行设计和改进扩展能够控制整个计算机系统、分析了解掌握需要很多本身过程需要很多知识能力学习和提升、有挑战。
操作系统在不停地发展、硬件在改变、需求在变化、在工控领域有强烈的需求

操作系统：计算机科学研究的基石之一
计算机系统的基本组成部分
由硬件的发展和应用需求所驱动
学术和工业的持续改进

挑战性：
操作系统很大，代码量大
掌握核心内容
管理并发，并发的系统，编程很容易导致错误，设计很巧妙的方法，提高效率，保证不会出错，并发导致有趣的编程挑战
管理原始硬件，应对时间依赖行为，非法行为，硬件故障
管理计算机核心，代码可靠、高效
操作系统必须比用户程序拥有更高的稳定性
是安全的基础

操作系统需要权衡
空间与时间
性能和可预测性
公平和性能

硬件方面，操作系统需要
良好的硬件管理
合理的资源分配
例如：硬盘速度跟CPU、内存相差很多、操作系统需要协调处理



